# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2018-01-16 22:57
from __future__ import unicode_literals

import blog.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('no_of_persons', models.PositiveSmallIntegerField(default=0)),
                ('is_administrator', models.BooleanField(default=False)),
                ('is_president', models.BooleanField(default=False)),
                ('is_in_executive_committee', models.BooleanField(default=False)),
                ('phone_number', models.CharField(max_length=17, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex=b'^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(max_length=254)),
                ('surface_factor', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('month_to_pay', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('payed_amount', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('debt', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_to_pay', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('index_vechi_apa_rece', models.FloatField(default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('index_vechi_apa_calda', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('consum_apa_rece', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('consum_apa_calda', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('declared_water', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CommonBill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.date(2017, 12, 17))),
                ('gaze', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('incalzire_curenta', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('apa_calda', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('cons_apa_calda', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('apa_rece', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('cons_apa_rece', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('energie_electrica_parti_comune', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('intretinere_lift', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('deseuri_menajere', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('intretinere_interfon', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('salarii_bloc', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('cheltuieli_neprevazute', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
        ),
        migrations.CreateModel(
            name='ImportantDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=30)),
                ('monthly_due_date_start', blog.models.IntegerRangeField(default=1)),
                ('monthly_due_date_stop', blog.models.IntegerRangeField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='IntrariIntretinere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('consum_apa_rece', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cons. apa rece [mc]')),
                ('apa_rece', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost apa rece [lei]')),
                ('consum_apa_calda', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cons. apa calda [mc]')),
                ('apa_calda', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost apa calda [lei]')),
                ('gaze', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost gaze [lei]')),
                ('energie_parti_comune', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost en. parti comune [lei]')),
                ('interfon', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost intr. interfon[lei]')),
                ('deseuri_menajere', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost deseuri menajere [lei]')),
                ('salarii', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'salarii [lei]')),
                ('caldura', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost caldura [lei]')),
                ('lift', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'cost intr. lift [lei]')),
                ('cheltuieli_neprevazute', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name=b'chelt. neprev. [lei]')),
                ('total_luna_curenta', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('restante', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Key',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('is_used', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NewsPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=200, verbose_name=b'')),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OtherImportantContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=30)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message=b"Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex=b'^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(blank=True, max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='PollChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200, verbose_name=b'Choice')),
                ('number_of_votes', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PollQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=200)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poll_choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.PollChoice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='pollchoice',
            name='poll_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.PollQuestion'),
        ),
    ]
